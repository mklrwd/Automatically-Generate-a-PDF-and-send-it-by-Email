#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  sales_per_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    
    # TODO: also handle max sales
    model_sales = item["total_sales"]
    if model_sales > max_sales["total_sales"]:
        max_sales = item
        item["model"] = format_car(item["car"])
    
    # TODO: also handle most popular car_year
    item_year = item["car"]["car_year"]
    if item_year in sales_per_year:
      sales_per_year[item_year] = item["total_sales"] + sales_per_year[item_year]
    else:
      sales_per_year[item_year] = item["total_sales"]   
  popular_year = max(sales_per_year, key=sales_per_year.get)
  popular_year_total = sales_per_year[popular_year]

  summary = [
    "The {} generated the most revenue: ${}<br/>The {} had the most sales: {}<br/>The most popular year was {} with {} sales.".format(
      format_car(max_revenue["car"]), max_revenue["revenue"], max_sales["model"], max_sales["total_sales"], popular_year, popular_year_total),
  ]
  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  data.sort(key=lambda x: x["total_sales"])
  summary = process_data(data)
  # print(summary[0])
  # print(summary[0].replace('<br/>', '\n'))

  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales Summary for last month", summary[0], table_data)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = summary[0].replace('<br/>', '\n')
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)